load("Week4.rdata")
centr_eigen(imf2014.ig,directed=T)
library(igraph)
library(statnet)
library(tidyverse)
centr_eigen(imf2014.ig,directed=T)
eigen<-centr_eigen(imf2014.ig,directed=T)
eigen$vector
eigen$centralization
cbind(eigen$vector,V(imf2014.ig)$name)
imf.eigen<-cbind(eigen$vector,V(imf2014.ig)$name)
head(imf.eigen)
power_centrality(imf2014.ig)
power_centrality(imf2014.ig,rescale=T)
subnetwork_adjacency<-as.matrix(as_adjacency_matrix(imf2014.ig, attr="weight"))
subnetwork_adjacency_2<-subnetwork_adjacency %*% subnetwork_adjacency
rc<-diag(as.matrix(subnetwork_adjacency_2))/rowSums(as.matrix(subnetwork_adjacency_2))
rc<-ifelse(is.nan(rc),0,rc)
rc
head(rc)
dc<-1-diag(as.matrix(subnetwork_adjacency_2))/rowSums(as.matrix(subnetwork_adjacency_2))
dc<-ifelse(is.nan(dc),1,dc)
centralityDF<-data.frame(id=1:vcount(imf2014.ig),
name=V(imf2014.ig)$name,
degree_all=igraph::degree(imf2014.ig),
degree_in=igraph::degree(imf2014.ig,mode="in"),
degree_out=igraph::degree(imf2014.ig,mode="out"),
degree_norm=igraph::degree(imf2014.ig,normalized=T),
EV_cent=centr_eigen(imf2014.ig,directed = T)$vector,
BC_power=power_centrality(imf2014.ig),
reflect_EV=rc*centr_eigen(imf2014.ig,directed = T)$vector,
derive_EV=dc*centr_eigen(imf2014.ig,directed = T)$vector)
row.names(centralityDF)<-NULL
head(centralityDF)
attach(centralityDF)
breaks<-round(vcount(imf2014.ig)/20)
hist(degree_all,breaks=breaks,
main=paste("Distribution of Total Degree Scores in ",y,sep=""),
xlab="Total Degree Score")
hist(degree_all,breaks=breaks,
main=paste("Distribution of Total Degree Scores in ",sep=""),
xlab="Total Degree Score")
hist(degree_in,breaks=breaks,
main=paste("Distribution of In-Degree Scores in ",sep=""),
xlab="In-Degree Score")
hist(degree_out,breaks=breaks,
main=paste("Distribution of Out-Degree Scores in ",sep=""),
xlab="Out-Degree Score")
plot(degree_in,degree_out) #Bivariate plot (x,y)
abline(lm(degree_out~degree_in),col="red") #Fit a regression line (y~x)
cor(degree_in,degree_out) #Get the bivariate correlation coefficient
plot(degree_all,degree_norm)
abline(lm(degree_norm~degree_all),col="red")
cor(degree_all,degree_norm)
plot(degree_norm,EV_cent)
abline(lm(EV_cent~degree_norm),col="red")
cor(degree_all,EV_cent)
plot(BC_power,EV_cent)
abline(lm(EV_cent~BC_power),col="red")
cor(BC_power,EV_cent)
plot(reflect_EV,derive_EV)
abline(lm(derive_EV~reflect_EV),col="red")
cor(derive_EV,reflect_EV)
detach(centralityDF)
names(centralityDF) #Find the columns we want to run the correlation on
cols<-c(3:10) #All except the id and name in this instance
corMat<-cor(centralityDF[,cols],use="complete.obs") #Specify those in the bracket
corMat
library(corrplot)
install.packages(corplot)
install.packages(corrplot)
install.packages("corrplot")
library(corrplot)
corrplot(corMat) #Check the plots window to your right!
centralityGOT<-data.frame(id=1:vcount(gotlike.ig),
name=V(gotlike.ig)$name,
degree_all=igraph::degree(gotlike.ig),
degree_in=igraph::degree(gotlike.ig,mode="in"),
degree_out=igraph::degree(gotlike.ig,mode="out"),
degree_norm=igraph::degree(gotlike.ig,normalized=T),
EV_cent=centr_eigen(gotlike.ig,directed = T)$vector,
BC_power=power_centrality(gotlike.ig),
reflect_EV=rc*centr_eigen(gotlike.ig,directed = T)$vector,
derive_EV=dc*centr_eigen(gotlike.ig,directed = T)$vector)
row.names(centralityGOT)<-NULL
head(centralityGOT)
library(learnr)
knitr::opts_chunk$set(echo = FALSE)
library(igraph)
library(statnet)
library(tidyverse)
load("Week4.rdata")
tutorial_options(exercise.timelimit = 10)
centralityGOT<-data.frame(id=1:vcount(gotlike.ig),
name=V(gotlike.ig)$name,
degree_all=igraph::degree(gotlike.ig),
degree_in=igraph::degree(gotlike.ig,mode="in"),
degree_out=igraph::degree(gotlike.ig,mode="out"),
degree_norm=igraph::degree(gotlike.ig,normalized=T),
EV_cent=centr_eigen(gotlike.ig,directed = T)$vector,
BC_power=power_centrality(gotlike.ig),
reflect_EV=rc*centr_eigen(gotlike.ig,directed = T)$vector,
derive_EV=dc*centr_eigen(gotlike.ig,directed = T)$vector)
row.names(centralityGOT)<-NULL
head(centralityGOT)
arrange(centralityDF, desc(indegree))%>%slice(1:5))
arrange(centralityDF, desc(indegree))%>%slice(1:5)
centralityDF<-data.frame(id=1:vcount(imf2014.ig),
name=V(imf2014.ig)$name,
degree_all=igraph::degree(imf2014.ig),
degree_in=igraph::degree(imf2014.ig,mode="in"),
degree_out=igraph::degree(imf2014.ig,mode="out"),
degree_norm=igraph::degree(imf2014.ig,normalized=T),
EV_cent=centr_eigen(imf2014.ig,directed = T)$vector,
BC_power=power_centrality(imf2014.ig),
reflect_EV=rc*centr_eigen(imf2014.ig,directed = T)$vector,
derive_EV=dc*centr_eigen(imf2014.ig,directed = T)$vector)
row.names(centralityDF)<-NULL
rc<-diag(as.matrix(imf2014_adjacency_2))/rowSums(as.matrix(imf2014_adjacency_2))
rc<-ifelse(is.nan(rc),0,rc)
imf2014_adjacency<-as.matrix(as_adjacency_matrix(imf2014.ig, attr="weight"))
imf2014_adjacency_2<-imf2014_adjacency %*% imf2014_adjacency
rc<-diag(as.matrix(imf2014_adjacency_2))/rowSums(as.matrix(imf2014_adjacency_2))
rc<-ifelse(is.nan(rc),0,rc)
head(rc)
dc<-1-diag(as.matrix(imf2014_adjacency_2))/rowSums(as.matrix(imf2014_adjacency_2))
dc<-ifelse(is.nan(dc),1,dc)
head(dc)
centralityDF<-data.frame(id=1:vcount(imf2014.ig),
name=V(imf2014.ig)$name,
degree_all=igraph::degree(imf2014.ig),
degree_in=igraph::degree(imf2014.ig,mode="in"),
degree_out=igraph::degree(imf2014.ig,mode="out"),
degree_norm=igraph::degree(imf2014.ig,normalized=T),
EV_cent=centr_eigen(imf2014.ig,directed = T)$vector,
BC_power=power_centrality(imf2014.ig),
reflect_EV=rc*centr_eigen(imf2014.ig,directed = T)$vector,
derive_EV=dc*centr_eigen(imf2014.ig,directed = T)$vector)
row.names(centralityDF)<-NULL
head(centralityDF)
arrange(centralityDF, desc(indegree))%>%slice(1:5)
arrange(centralityDF, desc(degree_in))%>%slice(1:5)
arrange(centralityDF, desc(degree_in))%>%slice(1:3)
arrange(centralityDF, desc(reflect_EV))%>%slice(1:3)
arrange(centralityDF, desc(derived_EV))%>%slice(1:3)
arrange(centralityDF, desc(derive_EV))%>%slice(1:3)
View(imf2014_adjacency)
View(imf2014)
View(centralityDF)
centralityDF$RCminusDC<-(centralityDF$reflect_EV-centralityDF$derive_EV)
centralityDF$RCminusDC<-abs(centralityDF$reflect_EV-centralityDF$derive_EV)
arrange(centralityDF, desc(derive_EV))%>%slice(1:3)
arrange(centralityDF, desc(reflect_EV))%>%slice(1:5)
head(centralityDF)
arrange(centralityDF, desc(reflect_EV))%>%slice(1:5)
power_centrality(imf2014.ig)
centralityDF["Italy",]
centralityDF["Belgium",]
centralityDF[c"Belgium",]
centralityDF[Belgium,]
centralityDF["Belgium"],
centralityDF["Belgium"]
centralityDF["Belgium",]
centralityDF[11,]
centralityDF[7,]
centralityDF[2,]
load("/Users/meredithrolfe/Google Drive/Updated Course Syntax Files/Network Analysis Working Directory/Data/BAAD/BAAD_1_Lethality_Data.RData")
load("/Users/meredithrolfe/Google Drive/Text Scraping/moldbug.RData")
